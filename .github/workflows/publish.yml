name: Docker Image Publish
on:
  workflow_call:
    inputs:
      build_tag:
        description: 'Docker image tag, e.g. latest'
        required: true
        type: string
        default: 'latest'
      build_context:
        description: 'Docker build context, default is current directory, e.g. ./Docker/y-webrtc-signaling'
        required: true
        type: string
        default: './Docker/y-webrtc-signaling'
      build_args:
        description: 'Docker build args list, e.g. VERSION=1.0.0,ENV=prod'
        required: false
        type: string
        default: ''
      build_platforms:
        description: 'Docker build platforms, e.g. linux/amd64,linux/arm64,linux/arm/v7'
        required: false
        type: string
        default: 'linux/amd64,linux/arm64,linux/arm/v7'
  workflow_dispatch:
    inputs:
      build_tag:
        description: 'Docker image tag, e.g. latest'
        required: true
        type: string
        default: 'latest'
      build_context:
        description: 'Docker build context, default is current directory, e.g. ./Docker/y-webrtc-signaling'
        required: true
        type: string
        default: './Docker/y-webrtc-signaling'
      build_args:
        description: 'Docker build args list, e.g. VERSION=1.0.0,ENV=prod'
        required: false
        type: string
        default: ''
      build_platforms:
        description: 'Docker build platforms, e.g. linux/amd64,linux/arm64,linux/arm/v7'
        required: false
        type: string
        default: 'linux/amd64,linux/arm64,linux/arm/v7'

permissions:
  packages: write
  contents: read

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'workflow_call' || github.event_name == 'push'
    outputs:
      IMAGE_FULL_NAME: ${{ steps.set_vars.outputs.IMAGE_FULL_NAME }}
      IMAGE_NAME: ${{ steps.set_vars.outputs.IMAGE_NAME }}
      BUILD_TRIGGER_DESCRIPTION: ${{ steps.set_vars.outputs.BUILD_TRIGGER_DESCRIPTION }}
      BUILD_CONTEXT: ${{ steps.determine-context.outputs.BUILD_CONTEXT }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Output inputs
        run: |
          echo "The build tag is ${{ github.event.inputs.build_tag || inputs.build_tag }}"
          echo "The build context is ${{ github.event.inputs.build_context || inputs.build_context }}"
          echo "The build args are ${{ github.event.inputs.build_args || inputs.build_args }}"
          echo "The build platforms are ${{ github.event.inputs.build_platforms || inputs.build_platforms }}"

      - name: Determine Docker Context
        id: determine-context
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            BUILD_CONTEXT="${{ github.event.inputs.build_context }}" >> $GITHUB_OUTPUT
          else
            BUILD_CONTEXT="${{ inputs.build_context }}" >> $GITHUB_OUTPUT
          fi

      - name: Check context exist
        run: |
          if [ ! -d "${{ steps.determine-context.outputs.BUILD_CONTEXT }}" ]; then
            echo "Docker context ${{ steps.determine-context.outputs.BUILD_CONTEXT }} does not exist"
            exit 1
          fi

      - name: Set vars
        id: set_vars
        run: |
          CONTEXT="${{ steps.determine-context.outputs.build_context }}"
          TAG="${{ github.event.inputs.build_tag || inputs.build_tag }}"
          {
            echo "IMAGE_FULL_NAME=${{ github.actor }}/$(basename $CONTEXT):$TAG"
            echo "IMAGE_NAME=${{ github.actor }}/$(basename $CONTEXT)"
            echo "BUILD_TRIGGER_DESCRIPTION=Build and push Docker image ${{ github.actor }}/$(basename $CONTEXT):$TAG"
          } >> $GITHUB_OUTPUT
        

  docker-release:
    name: Publish Docker images
    needs: [setup]
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Build trigger description
        run: |
          echo "The image full name is ${{ needs.setup.outputs.IMAGE_FULL_NAME }}"
          echo "The image name is ${{ needs.setup.outputs.IMAGE_NAME }}"
          echo "The build trigger description is ${{ needs.setup.outputs.BUILD_TRIGGER_DESCRIPTION }}"
          echo "The docker context is ${{ needs.setup.outputs.BUILD_CONTEXT }}"
          echo "The build platforms are ${{ github.event.inputs.build_platforms || inputs.build_platforms }}"
          echo "The docker args are ${{ github.event.inputs.build_args || inputs.build_args }}"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to ALIYUNCS
        uses: docker/login-action@v3
        with:
          registry: registry.cn-beijing.aliyuncs.com
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ALIYUNCS_PASSWORD }}

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Convert args to list
        id: convert-args
        run: |
          if [ -n "${{ github.event.inputs.build_args || inputs.build_args }}" ]; then
            IFS=',' read -r -a build_args <<< "${{ github.event.inputs.build_args || inputs.build_args }}"
          else
            BUILD_ARGS=()
          fi
          formatted_build_args=$(printf "%s\n" "${build_args[@]}" | sed 's/^/    /')
          echo "BUILD_ARGS=${formatted_build_args}" >> $GITHUB_OUTPUT

      - name: Docker build and push
        uses: docker/build-push-action@v6
        with:
          context: ${{ needs.setup.outputs.BUILD_CONTEXT }}
          push: true
          tags: |
            ${{ needs.setup.outputs.IMAGE_FULL_NAME }}
            registry.cn-beijing.aliyuncs.com/${{ needs.setup.outputs.IMAGE_FULL_NAME }}
            ghcr.io/${{ needs.setup.outputs.IMAGE_FULL_NAME }}
          platforms: ${{ github.event.inputs.build_platforms || inputs.build_platforms }}
          build-args: ${{ steps.convert-args.outputs.BUILD_ARGS }}

      - name: Send Apprise Notification
        run: |
          curl -X POST \
            -F "tag=office,ycgo" \
            -F "body=事件: ${{ github.event_name }} 仓库: ${{ github.repository }} 提交: ${{ github.sha }} 描述: ${{ needs.setup.outputs.BUILD_TRIGGER_DESCRIPTION }} Hub: https://hub.docker.com/r/${{ needs.setup.outputs.IMAGE_NAME }}" \
            "${{ secrets.APPRISE_HTTP_URL }}"
